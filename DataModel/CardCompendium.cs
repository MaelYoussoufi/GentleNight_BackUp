using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Assets.Scripts.DataModel.Card;
using Assets.Scripts.DataModel.Serialise;
using Assets.Scripts.Helpers;
using UnityEngine;
using Object = System.Object;

namespace Assets.Scripts.DataModel
{
    public class CardCompendium
    {
        public List<CardDataModel> CardList = new List<CardDataModel>();
        private Dictionary<string, CardDataModel> compendium;
        private Dictionary<string, CardDataModel> compendiumByName;
        public List<string> FilesLoaded = new List<string>();

        public bool _loaded = false;
        
        public void Load()
        {
            if (!_loaded)
            {
                _loaded = true;

                string path = "Assets/Resources/Cards";

                var info = new DirectoryInfo(path);
                var fileInfo = info.GetFiles();


                foreach (var file in fileInfo)
                {
                    // We only examine text files (and ignore .meta generated by Unity)
                    if (file.Extension != ".txt") continue;
                    //Read the text from directly from the test.txt file
                    using (var reader = file.OpenText())
                    {
                        var collection = CardXmlCollection.Load(reader.BaseStream);
                        CardList.AddRange(collection.Cards);
                        FilesLoaded.Add(file.Name);
                    }

                }

                ValidateCardData();
                UpdateCompendium();
            }
        }

        private void UpdateCompendium()
        {
            compendium = CardList.ToDictionary(c => c.Id);
            compendiumByName = CardList.ToDictionary(c => c.Name);
        }

        private void ValidateCardData()
        {
            CardsMustHaveUniqueId();
            CardsMustHaveUniqueIdAndName();
        }

        private void CardsMustHaveUniqueId()
        {
            var cardId = CardList.Select(c => c.Id);
            if (cardId.Distinct().Count() != cardId.Count())
            {
                var duplicateNames = cardId.GetDuplicates();
                throw new Exception($"Duplicates card names present in compendium. Duplicates are: {String.Join(", ", duplicateNames)}");
            }
        }

        private void CardsMustHaveUniqueIdAndName()
        {
            var cardNames = CardList.Select(c => c.Name);
            var cardId = CardList.Select(c => c.Id);
            var cardIdAndName = cardNames.Concat(cardId);
            if (cardIdAndName.Distinct().Count() != cardIdAndName.Count())
            {
                var duplicateNames = cardIdAndName.GetDuplicates();
                throw new Exception($"Duplicates card names OR Id present in compendium - It's better for display names and technical Ids to be different. Duplicates are: {String.Join(", ", duplicateNames)}");
            }
        }

        public CardDataModel GetCard(string name)
        {
            if (TryGetCard(name, out var value))
            {
                return value;
            }
            else throw new Exception($"Card with Id {name} is not present in compendium.");
        }
        public CardDataModel GetCardByName(string name)
        {
            if (TryGetCardByName(name, out var value))
            {
                return value;
            }
            else throw new Exception($"Card with Name {name} is not present in compendium.");
        }

        private bool TryGetCard(string id, out CardDataModel o)
        {
            o = null;            
            return compendium?.TryGetValue(id, out o) ?? false;
        }

        private bool TryGetCardByName(string name, out CardDataModel o)
        {
            o = null;            
            return compendiumByName?.TryGetValue(name, out o) ?? false;
        }
    }
}
